{"version":3,"sources":["Footer.js","Menu.js","Contact.js","Home.js","App.js","serviceWorker.js","index.js","logo.png","img/thumbnail/1.jpg","img/full/1.jpg"],"names":["Footer","style","position","left","bottom","width","backgroundColor","color","textAlign","Menu","linksMarkup","this","props","links","map","link","index","linkMarkup","active","className","href","label","key","console","log","logo","backgroundImage","Component","Contact","handleChange","event","setState","target","name","value","handleSubmit","variables","feedback","state","email","window","emailjs","send","then","res","catch","err","error","Logo","id","action","type","placeholder","onChange","defaultValue","rows","cols","onClick","React","Home","IMAGES","src","fullImage","thumbnail","thumbnail1","thumbnailWidth","thumbnailHeight","caption","images","App","to","component","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8958af0f.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\n\r\nfunction Footer() {\r\n  const styleFooter = {\t\t\r\n  position: \"static\",\r\n  left: \"0\",\r\n  bottom: \"0\",\r\n  width: \"100%\",\r\n  backgroundColor: \"black\",\r\n  color: \"white\",\r\n  textAlign: \"center\"\r\n\r\n\r\n\t}\r\n\r\nreturn (\r\n\t\t<div style={styleFooter}>\r\n\t\t<br/>\t\r\n\t\t<h3> made by Kukla & Alex\t</h3>\r\n\t\t<br/>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\n\r\n\r\nexport default Footer\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './Menu.css';\r\n\r\nclass Menu extends Component {\r\n\r\n    render() {\r\n\r\n        let linksMarkup = this.props.links.map((link, index) => {\r\n            let linkMarkup = link.active ? (\r\n\r\n                <a className=\"menu__link menu__link--active\" href={link.link}> {link.label}</a>\r\n                \r\n            ) : (\r\n                <a className=\"menu__link\" href={link.link}>{link.label}</a>\r\n                \r\n            );\r\n\r\n            return (\r\n                <li key={index} className=\"menu__list-item\">\r\n                    {linkMarkup}\r\n                </li>\r\n            );\r\n        });\r\n\r\n\r\n        return (\r\n            <nav className=\"menu\">\r\n                {console.log(\"logo\")}\r\n                {console.log('url(' + this.props.logo + ')')}\r\n                <h1 style={{\r\n                backgroundImage: 'url(' + this.props.logo + ')'\r\n                }} className=\"menu__logo\"></h1> \r\n\r\n                <div className=\"menu__right\">\r\n                    <ul className=\"menu__list\">\r\n                        {linksMarkup}\r\n                    </ul>\r\n\r\n\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Menu from './Menu.js'\r\nimport Logo from './logo.png';\r\n\r\n\r\nclass Contact extends React.Component{\r\n      constructor() {\r\n            super()\r\n            this.state = { \r\n                feedback: '',\r\n                name: '',\r\n                email: ''\r\n            } \r\n         }\r\n\r\n\r\n handleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value})\r\n  }\r\n\r\n  //this method send email\r\n  handleSubmit = (event) => {\r\n    let variables = {feedback: this.state.feedback, name: this.state.name, email: this.state.email}\r\n    window.emailjs.send( 'gmail', 'neworder', variables).then(res => {\r\n        console.log('Email successfully sent!')\r\n    })\r\n    .catch(err => console.error('Oh well, you failed. Here some thoughts on the error that occured:', err))\r\n  }\r\n\r\n\r\n      render(){\r\n      let links = [\r\n        { label: 'головна', link: '#home', active: true },\r\n        { label: 'галерея', link: 'http://google.com'  },\r\n        { label: 'о нас', link: Contact },\r\n        { label: 'Contact Us', link: '#contact-us' }\r\n      ]  \r\n\r\n    return(\r\n\t\t<div>\r\n\r\n              <div className=\"container center\">\r\n        <Menu links={links} logo={Logo} />\r\n      </div> \r\n\t\t       \r\n    <div className=\"row\">\r\n    \t<div >\r\n        \r\n        \t<form id=\"contact-form\" className=\"contact-form\" action=\"#\">\r\n            \t<p className=\"contact-name\">\r\n            \t\t<input id=\"contact_name\" type=\"text\" placeholder=\"Ваше Имя\" \r\n                     onChange={this.handleChange} name=\"name\" />\r\n                </p>\r\n                <p className=\"contact-email\">\r\n                \t<input id=\"contact_email\" type=\"text\" placeholder=\"Ваш E-mail адрес для обратной связи\" \r\n                    defaultValue={this.state.email} name=\"email\" onChange={this.handleChange} />\r\n                </p>\r\n                <p className=\"contact-message\">\r\n                \t<textarea id=\"contact_message\" placeholder=\"Ваше сообщение\" name=\"feedback\" rows=\"15\" cols=\"40\"\r\n                    onChange={this.handleChange}></textarea>\r\n                </p>\r\n                <p className=\"contact-submit\">\r\n                \t<input type=\"button\" value=\"Отправить\" className=\"submit\" onClick={this.handleSubmit} />\r\n                   \r\n                </p>\r\n                \r\n                <div id=\"response\">\r\n                \r\n                </div>\r\n            </form>\r\n         \r\n        </div>\r\n        \r\n        <div >\r\n        \t<div className=\"contact-details\">\r\n        \t\t<h3>Мои контакти</h3>\r\n                <ul>\r\n                    <h3><a>Admin@vega.ck.ua</a></h3>\r\n                    <h3>(063) 560-1983  Виктор</h3>\r\n                    <h3>\r\n                        Время работы с 10:00 - 19:00\r\n                    </h3>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n        <a> {this.state.name} </a>\r\n\t\t</div>\r\n\t)\t\r\n    }\t\r\n}\r\n\r\nexport default Contact","import React from 'react';\r\nimport './App.css';\r\nimport Menu from './Menu.js'\r\nimport Logo from './logo.png';\r\nimport Gallery from 'react-grid-gallery';\r\nimport thumbnail1 from './img/thumbnail/1.jpg'\r\nimport fullImage from './img/full/1.jpg'\r\n\r\n\r\nfunction Home(){\r\n    \r\n      let links = [\r\n        { label: 'головна', link: '#home', active: true },\r\n        { label: 'галерея', link: 'http://google.com'  },\r\n        { label: 'о нас', link: \"dsfg\" },\r\n        { label: 'Contact Us', link: '#contact-us' }\r\n      ]  \r\n\r\n      const IMAGES =\r\n[{\r\n        src: fullImage,\r\n        thumbnail: thumbnail1,\r\n        thumbnailWidth: 320,\r\n        thumbnailHeight: 174,\r\n        caption: \"лепка це круто\"\r\n},\r\n{\r\n        src: \"https://c2.staticflickr.com/9/8356/28897120681_3b2c0f43e0_b.jpg\",\r\n        thumbnail: \"https://c2.staticflickr.com/9/8356/28897120681_3b2c0f43e0_n.jpg\",\r\n        thumbnailWidth: 320,\r\n        thumbnailHeight: 212,\r\n}]\r\n\r\n\treturn(\r\n\t\t<div>\r\n       <div className=\"container center\">\r\n        <Menu links={links} logo={Logo} />\r\n\r\n      </div>    \r\n        <h1>home page </h1>\r\n        <Gallery images={IMAGES}/>  \r\n    </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Home\r\n\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Footer from './Footer.js'\r\nimport Contact from './Contact'\r\nimport Home from './Home'\r\nimport{BrowserRouter, Route, Switch, Link} from 'react-router-dom'\r\n\r\nclass App extends React.Component {\r\n\r\n  render(){\r\n    \r\n\r\n  return (\r\n    \r\n\r\n      <BrowserRouter>\r\n\r\n            <Link to=\"/contact\">\r\n        <h1> contact </h1>\r\n      </Link>\r\n      <Link to=\"/\">\r\n        <h1> home </h1>\r\n      </Link>\r\n      \r\n        <Switch>\r\n          <Route component={Home} exact path=\"/\" />\r\n          <Route component={Contact} path=\"/contact\" />\r\n\r\n        </Switch>\r\n\r\n\r\n     \r\n\r\n\r\n      \r\n\r\n      <h1 id=\"forStickFooter\"> </h1>\r\n      <Footer />\r\n      </BrowserRouter>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.2b42aefb.png\";","module.exports = __webpack_public_path__ + \"static/media/1.08ab0b90.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.08ab0b90.jpg\";"],"sourceRoot":""}